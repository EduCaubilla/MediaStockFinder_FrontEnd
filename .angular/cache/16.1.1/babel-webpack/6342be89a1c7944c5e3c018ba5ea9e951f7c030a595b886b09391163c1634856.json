{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RequestService = /*#__PURE__*/(() => {\n  class RequestService {\n    http;\n    isLogged = new BehaviorSubject(this.getLogged());\n    user;\n    response$;\n    constructor(http) {\n      this.http = http;\n    }\n    headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    refreshUser() {\n      const id = localStorage.getItem('id');\n      if (this.user === undefined && id !== null) {\n        this.response$ = this.searchUser$(id);\n        return this.response$.subscribe(data => {\n          this.user = data.user;\n          console.log('ENTRA SERVICE USER ', this.user);\n        });\n      }\n    }\n    newRefreshUser(user) {\n      this.user = user;\n    }\n    setToken(token) {\n      console.log('guarda TOKEN');\n      localStorage.setItem('accesstoken', token);\n    }\n    getLogged() {\n      if (localStorage.getItem('isLogged') === 'true') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    // ------------------ PHOTO\n    // BUSCADOR PRINCIPAL\n    searchPhotos$(search) {\n      const URL_API_SEARCH = `${environment.API_URL}/photo/${search}/1`;\n      // const URL_API_SEARCH = `${environment.API_URL}/photo/${search}`;\n      console.log(URL_API_SEARCH);\n      return this.http.get(URL_API_SEARCH);\n    }\n    searchPhotosNextPage$(search, page) {\n      const URL_API_SEARCH_PAGE = `${environment.API_URL}/photo/${search}/${page}`;\n      // const URL_API_SEARCH = `${environment.API_URL}/photo/${search}`;\n      return this.http.get(URL_API_SEARCH_PAGE);\n    }\n    // RANDOM\n    listRandom$() {\n      const URL_API_RANDOM = `${environment.API_URL}/photo/random/1`;\n      return this.http.get(URL_API_RANDOM);\n    }\n    // CATEGORÍA NATURE\n    searchPhotosNature$() {\n      const URL_API_NATURE = `${environment.API_URL}/photo/categories/nature`;\n      return this.http.get(URL_API_NATURE);\n    }\n    // CATEGORÍA PEOPLE\n    searchPhotosPeople$() {\n      const URL_API_PEOPLE = `${environment.API_URL}/photo/categories/people`;\n      return this.http.get(URL_API_PEOPLE);\n    }\n    // CATEGORÍA FOOD & DRINKS\n    searchPhotosFoodDrink$() {\n      const URL_API_FOODDRINK = `${environment.API_URL}/photo/categories/food&drink`;\n      return this.http.get(URL_API_FOODDRINK);\n    }\n    // CATEGORÍA LATEST\n    searchPhotosLatest$() {\n      const URL_API_LATEST = `${environment.API_URL}/photo/categories/latest`;\n      return this.http.get(URL_API_LATEST);\n    }\n    // RANDOM PARA UNA FOTO - JUMBOTRON\n    oneRandom$() {\n      const URL_API_ONERANDOM = `${environment.API_URL}/photo/onerandom`;\n      return this.http.get(URL_API_ONERANDOM);\n    }\n    // BÚSQUEDA DE UNA FOTO\n    searchOnePhoto$(type, id) {\n      const URL_API_ONEPHOTO = `${environment.API_URL}/photo/page/${type}/${id}`;\n      return this.http.get(URL_API_ONEPHOTO);\n    }\n    // ------------------ VIDEO\n    // VIDEO RANDOM\n    getVideos$() {\n      const URL_API_VIDEOS = `${environment.API_URL}/video/random/1`;\n      return this.http.get(URL_API_VIDEOS);\n    }\n    getNextVideos$(page) {\n      console.log(page);\n      const URL_API_VIDEOS = `${environment.API_URL}/video/random/${page}`;\n      return this.http.get(URL_API_VIDEOS);\n    }\n    // BÚSQUEDA DE LISTA DE VÍDEOS\n    searchVideos$(search) {\n      const URL_API_VIDEOS = `${environment.API_URL}/video/${search}/1`;\n      return this.http.get(URL_API_VIDEOS);\n    }\n    searchVideosNextPage$(search, page) {\n      const URL_API_VIDEOS = `${environment.API_URL}/video/${search}/${page}`;\n      return this.http.get(URL_API_VIDEOS);\n    }\n    // BÚSQUEDA DE UN VÍDEO\n    searchOneVideo$(type, id) {\n      const URL_API_ONEVIDEO = `${environment.API_URL}/video/page/${type}/${id}`;\n      return this.http.get(URL_API_ONEVIDEO);\n    }\n    // ------------------------ USER\n    registerUser$(user) {\n      const URL_API_REGISTER = `${environment.API_URL}/user/register`;\n      return this.http.post(URL_API_REGISTER, JSON.stringify(user), {\n        headers: this.headers\n      });\n    }\n    loginUser$(user) {\n      const URL_API_LOGIN = `${environment.API_URL}/user/login`;\n      return this.http.post(URL_API_LOGIN, JSON.stringify(user), {\n        headers: this.headers\n      }).pipe(tap(data => {\n        localStorage.setItem('isLogged', 'true');\n        this.isLogged.next(true);\n        return data;\n      }), catchError(error => {\n        console.log(error);\n        return throwError(error);\n      }));\n    }\n    logoutUser() {\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('isLogged');\n      localStorage.removeItem('id');\n      localStorage.clear();\n    }\n    getUserLogin$(user) {\n      const URL_API_GET_USER = `${environment.API_URL}/user/${this.user._id}`;\n      return this.http.post(URL_API_GET_USER, JSON.stringify(user), {\n        headers: this.headers\n      });\n    }\n    searchUser$(id) {\n      // this.user = user;\n      console.log('SALE ID PARA BUSCAR USER ' + id);\n      const token = localStorage.getItem('accesstoken');\n      // console.log('CON EL TOKEN ' + token);\n      const myToken = 'bearer ' + token;\n      // console.log(myToken);\n      console.log(id);\n      const URL_API_UPDATE = `${environment.API_URL}/user/${id}`;\n      return this.http.get(URL_API_UPDATE, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: myToken\n        }\n      });\n    }\n    getUser() {\n      console.log('GET USER', this.user);\n      return this.user;\n    }\n    setUser(user) {\n      console.log('guarda USER', user);\n      localStorage.setItem('id', user._id);\n      this.user = user;\n      console.log(this.user);\n    }\n    updateUser$(user) {\n      // this.user = user;\n      console.log('SALE USER PARA UPDATE ', user);\n      const token = localStorage.getItem('accesstoken');\n      // console.log('CON EL TOKEN ' + token);\n      const myToken = 'bearer ' + token;\n      // console.log(myToken);\n      console.log(this.user._id);\n      const URL_API_UPDATE = `${environment.API_URL}/user/${this.user._id}`;\n      return this.http.post(URL_API_UPDATE, JSON.stringify(user), {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: myToken\n        }\n      }).pipe(tap(data => {\n        console.log('ENTRA USER ACTUALIZADO ' + data);\n        this.user = data;\n        return data;\n      }), catchError(error => {\n        console.log(error);\n        return throwError(error);\n      }));\n    }\n    addUserItem$(media) {\n      console.log('SALE ITEM PARA ADD ', media);\n      const token = localStorage.getItem('accesstoken');\n      // console.log('CON EL TOKEN ' + token);\n      const myToken = 'bearer ' + token;\n      // console.log(myToken);\n      console.log(this.user._id);\n      const URL_API_UPDATE = `${environment.API_URL}/user/desk/${this.user._id}`;\n      return this.http.post(URL_API_UPDATE, JSON.stringify(media), {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: myToken\n        }\n      }).pipe(tap(data => {\n        console.log('ENTRA USER CON ITEM AÑADIDO ', data);\n        this.user = data;\n        return data;\n      }), catchError(error => {\n        console.log(error);\n        return throwError(error);\n      }));\n    }\n    static ɵfac = function RequestService_Factory(t) {\n      return new (t || RequestService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RequestService,\n      factory: RequestService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return RequestService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}